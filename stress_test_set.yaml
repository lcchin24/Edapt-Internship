# - input: 
# # passed
#     input_text: |
#       {
#         "sales": [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]
#       }
#     targets: ["sales"]
#     function: "Compute the sum of all sales values"
#     expected: "5500"

# - input: 
# # passed
#     input_text: |
#       {
#         "expenses": [120, 150, 180, 200, 170, 160, 155, 165, 175, 185,
#                      195, 205, 215, 225, 235, 245, 255, 265, 275, 285]
#       }
#     targets: ["expenses"]
#     function: "Find the average of all expense values"
#     expected: "203"

# - input: 
# # passed
#     input_text: |
#       {
#         "profits": [10, 20, 15, 25, 30, 40, 50, 35, 45, 55,
#                     65, 75, 85, 95, 100, 110, 120, 130, 140, 150,
#                     160, 170, 180, 190, 200, 210, 220, 230, 240, 250]
#       }
#     targets: ["profits"]
#     function: "Add up only the profit values that are greater than 100"
#     expected: "2700"

# - input: 
# # passed
#     input_text: |
#       {
#         "production": [100, 105, 110, 120, 115, 130, 135, 140, 145, 150,
#                        155, 160, 165, 170, 175, 180, 185, 190, 195, 200,
#                        205, 210, 215, 220, 225, 230, 235, 240, 245, 250,
#                        255, 260, 265, 270, 275, 280, 285, 290, 295, 300]
#       }
#     targets: ["production"]
#     function: "Compute the average increase between consecutive production values"
#     expected: "5.13"

# - input: 
#     input_text: |
#       {
#         "revenues": [1000, 1020, 1040, 1060, 1080, 1100, 1120, 1140, 1160, 1180,
#                      1200, 1220, 1240, 1260, 1280, 1300, 1320, 1340, 1360, 1380,
#                      1400, 1420, 1440, 1460, 1480, 1500, 1520, 1540, 1560, 1580,
#                      1600, 1620, 1640, 1660, 1680, 1700, 1720, 1740, 1760, 1780,
#                      1800, 1820, 1840, 1860, 1880, 1900, 1920, 1940, 1960, 1980],
#         "baseline": 1000
#       }
#     targets: ["revenues", "baseline"]
#     function: "Calculate the percent increase of average revenue compared to the baseline"
#     expected: "49"

# - input: 
# # passed
#     input_text: |
#       {
#         "weights": [50, 55, 60, 65, 70, 75, 80, 85, 90, 95,
#                     100, 105, 110, 115, 120, 125, 130, 135, 140, 145,
#                     150, 155, 160, 165, 170, 175, 180, 185, 190, 195,
#                     200, 205, 210, 215, 220, 225, 230, 235, 240, 245,
#                     250, 255, 260, 265, 270, 275, 280, 285, 290, 295,
#                     300, 305, 310, 315, 320, 325, 330, 335, 340, 345]
#       }
#     targets: ["weights"]
#     function: "Find what percent of the weights are greater than 200"
#     expected: "48.33"

# - input: 
# # passed
#     input_text: |
#       {
#         "durations": [5, 10, 15, 20, 25, 30, 35, 40, 45, 50,
#                       55, 60, 65, 70, 75, 80, 85, 90, 95, 100,
#                       105, 110, 115, 120, 125, 130, 135, 140, 145, 150]
#       }
#     targets: ["durations"]
#     function: "Calculate the median duration from the given values"
#     expected: "77.50"

# - input: 
# # passed
#     input_text: |
#       {
#         "temperatures": [32, 35, 37, 40, 42, 45, 47, 50, 52, 55,
#                          57, 60, 62, 65, 67, 70, 72, 75, 77, 80,
#                          82, 85, 87, 90, 92, 95, 97, 100, 102, 105,
#                          107, 110, 112, 115, 117, 120, 122, 125, 127, 130]
#       }
#     targets: ["temperatures"]
#     function: "Calculate the difference between the maximum and minimum temperature"
#     expected: "98"

# - input: 
# # passed
#     input_text: |
#       {
#         "budgets": [1000, 2000, 1500, 2500, 3000, 3500, 4000, 4500, 5000, 5500,
#                     6000, 6500, 7000, 7500, 8000, 8500, 9000, 9500, 10000, 10500,
#                     11000, 11500, 12000, 12500, 13000, 13500, 14000, 14500, 15000, 15500]
#       }
#     targets: ["budgets"]
#     function: "Compute the overall average budget"
#     expected: "8250"

# - input: 
# # passed
#     input_text: |
#       {
#         "scores": [60, 62, 64, 66, 68, 70, 72, 74, 76, 78,
#                    80, 82, 84, 86, 88, 90, 92, 94, 96, 98,
#                    100, 102, 104, 106, 108, 110, 112, 114, 116, 118,
#                    120, 122, 124, 126, 128, 130, 132, 134, 136, 138,
#                    140, 142, 144, 146, 148, 150, 152, 154, 156, 158]
#       }
#     targets: ["scores"]
#     function: "Compute the difference between the average of the second half and the first half"
#     expected: "50"


# - input:
#     input_text: |
#       {
#         "departments": {
#           "sales": [1200, 1300, 1250, 1400, 1350, 1500, 1450, 1600, 1550, 1700,
#                     1650, 1800, 1750, 1900, 1850, 2000, 1950, 2100, 2050, 2200,
#                     2250, 2300, 2400, 2350, 2500, 2450, 2600, 2550, 2700, 2650,
#                     2800, 2750, 2900, 2850, 3000, 2950, 3100, 3050, 3200, 3150,
#                     3300, 3250, 3400, 3350, 3500, 3450, 3600, 3550, 3700, 3650]
#         }
#       }
#     targets: ["departments.sales"]
#     function: Calculate the average of all sales values in the array
#     expected: "2456"

# - input:
# # passed
#     input_text: |
#       {
#         "inventory": {
#           "warehouse_A": [50, 60, 55, 70, 65, 80, 75, 90, 85, 100,
#                           95, 110, 105, 120, 115, 130, 125, 140, 135, 150,
#                           145, 160, 155, 170, 165, 180, 175, 190, 185, 200,
#                           195, 210, 205, 220, 215, 230, 225, 240, 235, 250,
#                           245, 260, 255, 270, 265, 280, 275, 290, 285, 300]
#         }
#       }
#     targets: ["inventory.warehouse_A"]
#     function: Find the total sum of all values stored in warehouse_A
#     expected: "8630"

# - input:
# # passed
#     input_text: |
#       {
#         "expenses": {
#           "marketing": [500, 600, 550, 650, 700, 750, 800, 850, 900, 950,
#                         1000, 1050, 1100, 1150, 1200, 1250, 1300, 1350, 1400, 1450,
#                         1500, 1550, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950,
#                         2000, 2050, 2100, 2150, 2200, 2250, 2300, 2350, 2400, 2450,
#                         2500, 2550, 2600, 2650, 2700, 2750, 2800, 2850, 2900, 2950,
#                         3000, 3050, 3100, 3150, 3200, 3250, 3300, 3350, 3400, 3450,
#                         3500, 3550, 3600, 3650, 3700, 3750, 3800, 3850, 3900, 3950,
#                         4000, 4050, 4100, 4150, 4200, 4250, 4300, 4350, 4400, 4450,
#                         4500, 4550, 4600, 4650, 4700, 4750, 4800, 4850, 4900, 4950,
#                         5000, 5050, 5100, 5150, 5200, 5250, 5300, 5350, 5400, 5450]
#         }
#       }
#     targets: ["expenses.marketing"]
#     function: Compute the difference between the largest and smallest marketing expense
#     expected: "4950"

# - input:
# # passed
#     input_text: |
#       {
#         "research": {
#           "experiments": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
#                           11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
#                           21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
#                           31, 32, 33, 34, 35, 36, 37, 38, 39, 40,
#                           41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
#                           51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
#                           61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
#                           71, 72, 73, 74, 75, 76, 77, 78, 79, 80,
#                           81, 82, 83, 84, 85, 86, 87, 88, 89, 90,
#                           91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
#         }
#       }
#     targets: ["research.experiments"]
#     function: Calculate the mean of all experiment results
#     expected: "50.50"

# - input:
# # passed
#     input_text: |
#       {
#         "operations": {
#           "batch_processing": [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000,
#                                2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000,
#                                4200, 4400, 4600, 4800, 5000, 5200, 5400, 5600, 5800, 6000,
#                                6200, 6400, 6600, 6800, 7000, 7200, 7400, 7600, 7800, 8000,
#                                8200, 8400, 8600, 8800, 9000, 9200, 9400, 9600, 9800, 10000]
#         }
#       }
#     targets: ["operations.batch_processing"]
#     function: Find the total sum of all batch_processing values
#     expected: "255000"


# - input:
# # passed
#     input_text: |
#       {
#         "simulation": {
#           "trial_results": [1, 2, 3, 4, 5, ..., 500]
#         }
#       }
#     targets: ["simulation.trial_results"]
#     function: Calculate the mean of all trial_results
#     expected: "250.50"

# - input:
# # passed
#     input_text: |
#       {
#         "finance": {
#           "quarterly_profits": [1000, 2000, 3000, 4000, ..., 1000000]
#         }
#       }
#     targets: ["finance.quarterly_profits"]
#     function: Find the total sum of quarterly_profits
#     expected: "5050000"

# - input:
# # passed
#     input_text: |
#       {
#         "engineering": {
#           "sensor_readings": [500, 505, 510, 515, ..., 2995]
#         }
#       }
#     targets: ["engineering.sensor_readings"]
#     function: Compute the difference between the largest and smallest sensor_readings
#     expected: "2495"

# - input:
# # passed
#     input_text: |
#       {
#           "data": {
#             "purchases": [12, 45, 67, 23, 89, 54, 33, 76, 92, 11, 34, 56, 78, 90, 21, 43, 65, 87, 109, 34,
#                   56, 78, 12, 44, 66, 88, 23, 45, 67, 89, 32, 54, 76, 98, 120, 34, 56, 78, 99, 101,
#                   12, 43, 65, 87, 23, 44, 66, 88, 90, 111, 132, 153, 174, 195, 216, 237, 258, 279,
#                   300, 321, 342, 363, 384, 405, 426, 447, 468, 489, 510, 531, 552, 573, 594, 615,
#                   636, 657, 678, 699, 720, 741, 762, 783, 804, 825, 846, 867, 888, 909, 930, 951,
#                   972, 993, 1014, 1035, 1056, 1077, 1098, 1119]
#         }
#       }
#     targets: ["data.purchases"]
#     function: Calculate the total sum of all purchases
#     expected: "33088"

# - input:
# # passed
#     input_text: |
#       {
#         "data": {
#           "temperatures": [70, 71, 69, 72, 68, 74, 75, 73, 72, 71, 69, 68, 67, 66, 70, 71, 72, 74, 73, 72,
#                         70, 69, 71, 73, 75, 74, 72, 71, 70, 68, 67, 66, 65, 64, 66, 68, 70, 71, 72, 73,
#                         74, 76, 75, 73, 72, 71, 69, 68, 67, 66, 65, 64, 63, 62, 64, 66, 68, 69, 71, 73,
#                         75, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 62, 64, 66, 68,
#                         70, 71, 72, 74, 73, 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 62, 64,
#                         66, 68, 70, 72, 74, 75, 73, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60, 62,
#                         64, 66, 68, 70, 72, 74, 75, 73, 71, 70, 69, 68, 67, 66, 65, 64]
#         }
#       }
#     targets: ["data.temperatures"]
#     function: Compute the mean temperature
#     expected: "68.78"

# - input:
# # passed
#     input_text: |
#       {
#         "data": {
#           "readings": [i for i in range(1, 1001)]
#         }
#       }
#     targets: [data.readings]
#     function: Find the maximum sensor reading
#     expected: "1000"

# - input:
# # passed
#     input_text: |
#       {
#         "data": {
#           "productivity": [500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515,
#                         500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515, 500, 510, 495, 505, 520, 515]
#         }
#       }
#     targets: ["data.productivity"]
#     function: Return the minimum productivity value
#     expected: "495"

# - input:
# # passed
#     input_text: |
#       {
#         "data": {
#           "employee_ids": [i for i in range(1001, 2701)]
#         }
#       }
#     targets: ["data.employee_ids"]
#     function: Compute max - min of employee IDs
#     expected: "1204"

# - input:
# # passed
#     input_text: |
#       {
#         "data": {
#           "production_units": [200, 210, 220, 230, 240, 250, 260, 270, 280, 290] * 160
#         }
#       }
#     targets: ["data.production_units"]
#     function: Average units produced
#     expected: "245"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "sales": [1000, 1100, 1200, 1150, 1300, 1250, 1400, 1350, 1450, 1500,
#                     1550, 1600, 1650, 1700, 1750, 1800, 1850, 1900, 1950, 2000],
#           "engineering": [500, 520, 540, 560, 580, 600, 620, 640, 660, 680,
#                           700, 720, 740, 760, 780, 800, 820, 840, 860, 880]
#         },
#         "inventory": {
#           "widgets": [300, 320, 340, 360, 380, 400, 420, 440, 460, 480]
#         }
#       }
#     targets: ["departments.sales", "departments.engineering", "inventory.widgets"]
#     function: "Compute the total sum of all sales, engineering, and widgets values combined."
#     expected: "48150"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "hr": [60, 62, 61, 64, 63, 65, 67, 66, 68, 70, 72, 71, 73, 75, 74, 76, 78, 77, 79, 80],
#           "finance": [120, 125, 130, 135, 140, 145, 150, 155, 160, 165,
#                       170, 175, 180, 185, 190, 195, 200, 205, 210, 215]
#         },
#         "projects": {
#           "active": [4, 5, 6, 5, 7, 6, 8, 7, 9, 8]
#         }
#       }
#     targets: ["departments.hr", "departments.finance", "projects.active"]
#     function: "Find the average of the average counts per category (hr, finance, active projects) over all values."
#     expected: "81.35"

# - input:
#     input_text: |
#       {
#         "sales": {
#           "east": [500, 520, 540, 560, 580, 600, 620, 640, 660, 680,
#                    700, 720, 740, 760, 780, 800, 820, 840, 860, 880],
#           "west": [480, 500, 520, 540, 560, 580, 600, 620, 640, 660,
#                    680, 700, 720, 740, 760, 780, 800, 820, 840, 860],
#           "central": [450, 470, 490, 510, 530, 550, 570, 590, 610, 630,
#                       650, 670, 690, 710, 730, 750, 770, 790, 810, 830]
#         }
#       }
#     targets: ["sales.east", "sales.west", "sales.central"]
#     function: "Calculate the month-to-month growth rate for east sales (percent change), average it and return result rounded to two decimals."
#     expected: "2.94"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "sales": [12000, 15000, 13000, 18000, 19000, 16000, 17000, 14000, 13500, 15500,
#                     14500, 16500, 17500, 18500, 19500, 20000, 21000, 22000, 23000, 24000]
#         }
#       }
#     targets: ["departments.sales"]
#     function: "Calculate the total sales over all months."
#     expected: "349500"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "engineering": [5000, 5400, 5100, 5300, 5500, 5900, 6100, 6000, 5800, 6200,
#                           6300, 6400, 6500, 6600, 6750, 6850, 6900, 7000, 7100, 7200]
#         }
#       }
#     targets: ["departments.engineering"]
#     function: "Calculate the average engineering headcount across the months."
#     expected: "6195"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "hr": [1200, 1300, 1250, 1100, 1150, 1180, 1130, 1200, 1250, 1220,
#                  1280, 1300, 1350, 1400, 1380, 1450, 1500, 1550, 1600, 1650]
#         }
#       }
#     targets: ["departments.hr"]
#     function: "Calculate the difference between the maximum and minimum HR counts."
#     expected: "550"

# - input:
# # passed
#     input_text: |
#       {
#         "inventory": {
#           "widgets": [350, 400, 420, 380, 360, 410, 450, 470, 390, 420,
#                       430, 440, 460, 470, 490, 500, 510, 520, 530, 540],
#           "gadgets": [200, 210, 220, 205, 215, 225, 230, 240, 235, 250,
#                       255, 260, 265, 270, 275, 280, 285, 290, 295, 300],
#           "doohickeys": [80, 75, 90, 85, 100, 95, 110, 105, 120, 115,
#                          125, 130, 135, 140, 145, 150, 155, 160, 165, 170]
#         }
#       }
#     targets: ["inventory.widgets", "inventory.gadgets", "inventory.doohickeys"]
#     function: "Calculate the total inventory sum (widgets + gadgets + doohickeys)."
#     expected: "16395"

# - input:
# # passed
#     input_text: |
#       {
#         "inventory": {
#           "widgets": [350, 400, 420, 380, 360, 410, 450, 470, 390, 420,
#                       430, 440, 460, 470, 490, 500, 510, 520, 530, 540],
#           "gadgets": [200, 210, 220, 205, 215, 225, 230, 240, 235, 250,
#                       255, 260, 265, 270, 275, 280, 285, 290, 295, 300]
#         }
#       }
#     targets: ["inventory.widgets", "inventory.gadgets"]
#     function: "Calculate the average gadgets inventory for months where widgets inventory exceeded 400."
#     expected: "262.67"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "sales": [12000, 15000, 13000, 18000, 19000, 16000, 17000, 14000, 13500, 15500,
#                     14500, 16500, 17500, 18500, 19500, 20000, 21000, 22000, 23000, 24000]
#         }
#       }
#     targets: ["departments.sales"]
#     function: "Calculate the month-to-month change (delta) in sales and return the average delta."
#     expected: "631.58"

- input:
    input_text: |
      {
        "departments": {
          "sales": [12000, 15000, 13000, 18000, 19000, 16000, 17000, 14000, 13500, 15500,
                    14500, 16500, 17500, 18500, 19500, 20000, 21000, 22000, 23000, 24000]
        }
      }
    targets: ["departments.sales"]
    function: "Calculate the sum of all sales values where the value exceeds 13,000."
    expected: "276500"

# - input:
# # passed
#     input_text: |
#       {
#         "departments": {
#           "sales": [12000, 15000, 13000, 18000, 19000, 16000, 17000, 14000, 13500, 15500,
#                     14500, 16500, 17500, 18500, 19500, 20000, 21000, 22000, 23000, 24000],
#           "engineering": [5000, 5400, 5100, 5300, 5500, 5900, 6100, 6000, 5800, 6200,
#                           6300, 6400, 6500, 6600, 6750, 6850, 6900, 7000, 7100, 7200]
#         }
#       }
#     targets: ["departments.sales", "departments.engineering"]
#     function: "Calculate the weighted average engineering headcount weighted by sales per month."
#     expected: "6295.06"

- input:
    input_text: |
      {
        "metrics": {
          "sales": [12000, 15000, 13000, 18000, 19000, 16000, 17000, 14000, 13500, 15500,
                    14500, 16500, 17500, 18500, 19500, 20000, 21000, 22000, 23000, 24000],
          "engineering": [5000, 5400, 5100, 5300, 5500, 5900, 6100, 6000, 5800, 6200,
                          6300, 6400, 6500, 6600, 6750, 6850, 6900, 7000, 7100, 7200],
          "hr": [1200, 1300, 1250, 1100, 1150, 1180, 1130, 1200, 1250, 1220,
                  1280, 1300, 1350, 1400, 1380, 1450, 1500, 1550, 1600, 1650],
          "widgets": [350, 400, 420, 380, 360, 410, 450, 470, 390, 420,
                      430, 440, 460, 470, 490, 500, 510, 520, 530, 540],
          "gadgets": [200, 210, 220, 205, 215, 225, 230, 240, 235, 250,
                      255, 260, 265, 270, 275, 280, 285, 290, 295, 300]
        }
      }
    targets: ["metrics.sales", "metrics.engineering", "metrics.hr", "metrics.widgets", "metrics.gadgets"]
    function: |
      Calculate the total sales only for months where:
      - engineering headcount increased compared to the previous month
      - AND HR count was above the median HR count.
      
      Steps:
      1. Compute the median of the hr array.
      2. For each month from the second to last, check if engineering[i] > engineering[i-1] AND hr[i] > median.
      3. Sum the sales values where the above condition is true.
    expected: "165600"

# - input:
# # passed after specifying not to use numpy
#     input_text: |
#       {
#         "metrics": {
#           "sales": [12000, 15000, 13000, 18000, 19000, 16000, 17000, 14000, 13500, 15500,
#                     14500, 16500, 17500, 18500, 19500, 20000, 21000, 22000, 23000, 24000],
#           "engineering": [5000, 5400, 5100, 5300, 5500, 5900, 6100, 6000, 5800, 6200,
#                           6300, 6400, 6500, 6600, 6750, 6850, 6900, 7000, 7100, 7200],
#           "hr": [1200, 1300, 1250, 1100, 1150, 1180, 1130, 1200, 1250, 1220,
#                  1280, 1300, 1350, 1400, 1380, 1450, 1500, 1550, 1600, 1650],
#           "widgets": [350, 400, 420, 380, 360, 410, 450, 470, 390, 420,
#                       430, 440, 460, 470, 490, 500, 510, 520, 530, 540],
#           "gadgets": [200, 210, 220, 205, 215, 225, 230, 240, 235, 250,
#                       255, 260, 265, 270, 275, 280, 285, 290, 295, 300]
#         }
#       }
#     targets: ["metrics.sales", "metrics.engineering", "metrics.hr", "metrics.widgets", "metrics.gadgets"]
#     function: |
#       Compute the total sales for months where all of the following hold:
#       - engineering headcount increased from previous month
#       - widgets inventory increased by at least 20 compared to previous month
#       - gadgets inventory is above the median gadgets count
      
#       Steps:
#       1. Calculate median of gadgets array.
#       2. For each month from index 1 forward:
#          - engineering[i] > engineering[i - 1]
#          - widgets[i] - widgets[i - 1] >= 20
#          - gadgets[i] > median gadgets
#       3. Sum sales for months satisfying all conditions.
#     expected: "37000"

# - input:
# # passed
#     input_text: |
#       {
#         "metrics": {
#           "sales": [12500, 15500, 13500, 18500, 19500, 16500, 17500, 14500, 14000, 16000,
#                     15000, 17000, 18000, 19000, 20000, 20500, 21500, 22500, 23500, 24500],
#           "engineering": [5200, 5500, 5300, 5600, 5800, 6000, 6200, 6100, 5900, 6300,
#                           6400, 6500, 6600, 6700, 6850, 6950, 7000, 7100, 7200, 7300]
#         }
#       }
#     targets: ["metrics.sales", "metrics.engineering"]
#     function: |
#       1. Calculate the average sales value for months where the engineering headcount decreased compared to the previous month.
#       2. Calculate the average month-to-month delta (change) in sales.
#       3. Return the sum of the two averages rounded to two decimals.
#     expected: "14631.58"
# - input:
# # passed after specifying not to use numpy
#     input_text: |
#       {
#         "metrics": {
#           "sales": [12000, 15500, 13500, 18500, 19000, 17500, 16500, 14000, 14500, 17000,
#                     15000, 16000, 18000, 19500, 20000, 20500, 21500, 22500, 23500, 24500],
#           "engineering": [5200, 5700, 5300, 5800, 5900, 5600, 6100, 6300, 5900, 6500,
#                           6400, 6600, 6700, 6800, 7200, 7250, 7100, 7300, 7400, 7500],
#           "widgets": [375, 410, 390, 440, 420, 415, 460, 480, 400, 430,
#                       440, 445, 470, 478, 500, 505, 510, 530, 549, 555]
#         }
#       }
#     targets: ["metrics.sales", "metrics.engineering", "metrics.widgets"]
#     function: |
#       1. Min-max normalize the sales, engineering, and widgets arrays individually.
#       2. For each month, compute a weighted score: 0.5 * normalized_sales + 0.3 * normalized_engineering + 0.2 * normalized_widgets.
#       3. Determine the 80th percentile threshold of all month scores.
#       4. Return the sum of sales values for months where the weighted score exceeds the 80th percentile threshold.
#     expected: "92000"
# - input:
# # passed
#     input_text: |
#       {
#         "monthly_metrics": {
#           "sales": [12000, 12500, 12300, 12800, 13300, 14000, 15000, 15500, 16000, 16800,
#                     17000, 17500, 18000, 18500, 19000, 19200, 19800, 20200, 20700, 21300,
#                     21500, 22000, 22500, 23000, 23500, 24000, 24500, 25000, 25500, 26000],
#           "engineering": [5000, 5100, 5080, 5150, 5200, 5300, 5450, 5530, 5600, 5700,
#                           5750, 5800, 5900, 6000, 6100, 6200, 6300, 6350, 6400, 6450,
#                           6500, 6600, 6700, 6800, 6900, 6950, 7050, 7100, 7150, 7200],
#           "hr": [1200, 1210, 1190, 1225, 1240, 1255, 1260, 1270, 1285, 1300, 1320, 1335,
#                  1350, 1375, 1380, 1390, 1410, 1430, 1450, 1470, 1480, 1500, 1520, 1540,
#                  1560, 1580, 1600, 1620, 1635, 1650],
#           "widgets": [400, 410, 420, 430, 440, 450, 460, 470, 480, 490,
#                       500, 510, 520, 530, 540, 550, 560, 570, 585, 590,
#                       600, 610, 620, 630, 640, 650, 660, 670, 680, 690],
#           "gadgets": [200, 205, 210, 220, 225, 230, 235, 240, 250, 255,
#                       260, 265, 270, 275, 280, 285, 290, 295, 300, 310,
#                       315, 320, 325, 330, 335, 340, 345, 350, 355, 360]
#         }
#       }
#     targets: ["monthly_metrics.sales", "monthly_metrics.engineering", "monthly_metrics.hr", "monthly_metrics.widgets", "monthly_metrics.gadgets"]
#     function: |
#       - Find the months where both gadgets and widgets inventory are in the top 20% of their values for the period.
#       - For these months, identify only those where engineering increased by at least 50 compared to the previous month.
#       - Of these, sum all sales values for months where the hr count is ABOVE the hr average for the period.
#       - Return the resulting sum.
#     expected: "148500"
# - input:
# # failed: python interpreter couldn't use numpy
#     input_text: |
#       {
#         "metrics": {
#           "sales": [12600, 13000, 13500, 13900, 14500, 15100, 15500, 16000, 16500, 17000,
#                     17500, 18000, 18500, 19000, 19500, 20000, 20500, 21000, 21500, 22000,
#                     22500, 23000, 23500, 24000, 24500, 25000, 25500, 26000, 26700, 27200,
#                     27800, 28400, 29000, 29800, 30500, 31200, 32000, 32800, 33500, 34200],
#           "engineering": [5100, 5150, 5200, 5250, 5300, 5350, 5400, 5450, 5520, 5600,
#                           5670, 5750, 5830, 5910, 5990, 6070, 6150, 6230, 6310, 6390,
#                           6470, 6550, 6630, 6710, 6790, 6870, 6950, 7030, 7110, 7190,
#                           7270, 7350, 7430, 7510, 7590, 7670, 7750, 7830, 7910, 7990],
#           "widgets": [320, 325, 330, 340, 350, 360, 370, 380, 390, 400,
#                       410, 420, 430, 440, 450, 460, 470, 480, 490, 500,
#                       510, 520, 530, 540, 550, 560, 570, 580, 590, 600,
#                       610, 620, 630, 640, 650, 660, 670, 680, 690, 700],
#           "gadgets": [150, 160, 170, 175, 180, 185, 190, 195, 210, 220,
#                       225, 240, 250, 265, 275, 280, 285, 290, 295, 300,
#                       305, 310, 320, 325, 330, 335, 340, 345, 350, 355,
#                       360, 365, 370, 375, 380, 385, 390, 395, 400, 405],
#           "expenses": [2500, 2520, 2540, 2560, 2580, 2600, 2620, 2640, 2660, 2680,
#                        2700, 2720, 2740, 2760, 2780, 2800, 2820, 2840, 2860, 2880,
#                        2900, 2920, 2940, 2960, 2980, 3000, 3020, 3040, 3070, 3100,
#                        3120, 3150, 3170, 3200, 3220, 3250, 3270, 3300, 3330, 3360]
#         }
#       }
#     targets: ["metrics.sales", "metrics.engineering", "metrics.widgets", "metrics.gadgets", "metrics.expenses"]
#     function: |
#       1. For each array, min-max normalize all 40 values.
#       2. For each month, calculate a combined score:
#          score = 0.4 * normalized_sales + 0.2 * normalized_engineering + 0.2 * normalized_widgets + 0.2 * normalized_gadgets.
#       3. For each month, compute a rolling mean of the score (window size: 4).
#       4. Calculate the 90th percentile of all rolling means.
#       5. Among the months where the rolling mean is above this threshold, sum all corresponding sales minus expenses. Return this net sum rounded to the nearest integer.
#     expected: "106408"
